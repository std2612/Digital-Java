변수
 - 문제를 해결하기 위해 알맞은 변수를 선언할 수 있다
 - 자료형
 - 자료형 변환
	- 자동 : 정수 -> 실수, 작은바이트 -> 큰바이트
	- 명시적 : 자동 형 변환이 안되는 경우와 자동 형 변환이 가능하지만 의도적으로 자료형 변환이 필요한 경우 (나누기)
 - 일반변수, 참조변수, 객체변수, 클래스변수
	- 일반변수 : 자료형으로 이루어진 변수
	- 참조변수 : 일반변수 아닌 변수로 주소를 저장
	- 객체변수 : 클래스의 멤버 변수로, static이 붙지 않은 변수, 객체 생성 후 사용 가능
	- 클래스변수 : 클래스의 멤버변수로, static이 붙는 변수, 객체 생성없이 사용 가능

연산자
 - 연산자 종류를 알고, 그 결과를 예측할 수 있다
 - 산술 연산자
 	- % : 나머지를 반환하는 연산자, 나누었을 때 나머지 => %
 	- / : 정수/정수 => 정수, 자료형 변환이 필요하다
 - 증감 연산자 : ++, --
 	- 최종적으로 1증가 또는 1감소
 	- 전위형 : 증가하고 동작
 	- 후위형 : 동작하고 증가
 - 대입 연산자 : =
 	- 오른쪽에 있는 값을 왼쪽에 저장
 	- 자료형 변환이 가능할 때만 =을 쓸 수 있다.
 	- 클래스끼리 대입 연산자를 사용할 경우 부모 클래스의 객체에 자식 클래스의 객체를 저장하는 경우에 자동 형변환이 가능
 - 비교 연산자 : ==와 대입 연산자 = 을 착각하면 안됨
 - 논리 연산자 : &&(and)와 ||(or)을 정확히 구분할 수 있어야 한다.
 
조건문
 - ~하면 ...한다라는 표현이 되는 상황을 조건문으로 나타낼 수 있다.
 - if문 : 모든 조건문은 if문으로 표현할 수 있다.
 - 주의사항
 	- if(조건식); {
 		실행문;
 	  }
 	- else(조건식) {
 		실행문;
 	  }
 -switch문
	1. 사용되는 변수의 값이 제한적일 때
	2. 사용되는 식의 값이 제한적일 때

반복문
 - 규칙성있게 반복되는 작업을 할 때 사용
 - for문, while문
 - do while문 : 무조건 1번은 실행
 - 주의사항
 	- 무한루프에 빠지지 않게 조심
 - 반복문은 실행순서를 따져볼 수 있어야 한다
 
클래스
 - 데이터를 효율적으로 관리하기 위한 클래스를 생성할 수 있다
 - 멤버변수, 멤버메소드, 생성자
 - 생성자 : 이름이 클래스명과 동일, 리턴타입 x, 주로 멤버변수 초기화
 - 메소드 : (하나의) 기능을 하도록 모아놓은 코드
 - 리턴타입, 매개변수, 메소드명
 - 메소드 오버로딩 : 동일한 이름을 가진 메소드가 여러개 있는 경우
 				 매개변수가 달라야 한다
 - getter와 setter : 멤버 변수의 값을 설정하거나 가져오는 메소드
 
상속
 - 부모클래스를 물려 받는 것
 - 오버라이딩 : 부모클래스에 있는 메소드를 재정의하는 것
 - 제어자
 	- static : 클래스 ~
 	- final : 상수
 		- 클래스 : 부모가 될 수 없다
 		- 메소드 : 오버라이딩이 불가능
 		- 변수 : 상수
 	- 접근제한자 : public, protected, default, private
 				abtract : 추상
 - 추상 메소드 : 메소드의 구현부가 없는 메소드
 	- 객체를 만들려면 추상 메소드를 정의해야 한다 => 오버라이딩
 - 인터페이스 : 상수와 추상 메소드로만 이루어진 것
 	- 기능 요약으로 어떠한 기능들이 필요한지 나열해 놓은 것
 	- 협업할 때 작업하기가 용이하다
 	
예외처리 : Exception
 - try~catch문 : 예외를 처리
 - throw : 예외를 발생
 
컬렉션 프레임워크
 - Collection(List, Set), Map
 - List : 순서 보장, 중복 가능
 - Set : 순서 X, 중복 불가능
 - Map : key(중복 불가), value(중복 가능), 순서 X
 
열거형 : enum => 데이터의 값이 제한적이어서 값들을 상수로 취급해서 사용하고 싶을 때 사용

지네릭스 : 클래스의 멤버변수의 자료형을 미리 설정하지 않은 클래스
		객체가 생성될 때 멤버 변수의 자료형이 결정
		-컬렉션 프레임워크에서 많이 사용
		
